"""Initial Configuration

Revision ID: afb909a039c1
Revises: 
Create Date: 2024-09-14 20:59:26.747941

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel             # NEW
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'afb909a039c1'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('ready', 'running', 'stopped', 'failed', name='scraperstatus').create(op.get_bind())
    sa.Enum('day', 'week', name='scheduleunit').create(op.get_bind())
    op.create_table('query',
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('query', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('context', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('num_results', sa.Integer(), nullable=False),
    sa.Column('model', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('result', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_query_uuid'), 'query', ['uuid'], unique=True)
    op.create_table('resource',
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('source', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('downloader', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_resource_uuid'), 'resource', ['uuid'], unique=True)
    op.create_table('scraper',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('urls', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('status', postgresql.ENUM('ready', 'running', 'stopped', 'failed', name='scraperstatus', create_type=False), nullable=False),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_scraper_uuid'), 'scraper', ['uuid'], unique=True)
    op.create_table('schedule',
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('repeat_every', sa.Integer(), nullable=False),
    sa.Column('repeat_unit', postgresql.ENUM('day', 'week', name='scheduleunit', create_type=False), nullable=False),
    sa.Column('weekdays', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('time', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('scraper_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['scraper_id'], ['scraper.uuid'], ),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_schedule_uuid'), 'schedule', ['uuid'], unique=True)
    op.create_table('scraper_results',
    sa.Column('uuid', sqlmodel.sql.sqltypes.GUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp(0)'), nullable=False),
    sa.Column('results', postgresql.ARRAY(postgresql.JSON(astext_type=sa.Text())), nullable=True),
    sa.Column('scraper_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['scraper_id'], ['scraper.uuid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_scraper_results_uuid'), 'scraper_results', ['uuid'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_scraper_results_uuid'), table_name='scraper_results')
    op.drop_table('scraper_results')
    op.drop_index(op.f('ix_schedule_uuid'), table_name='schedule')
    op.drop_table('schedule')
    op.drop_index(op.f('ix_scraper_uuid'), table_name='scraper')
    op.drop_table('scraper')
    op.drop_index(op.f('ix_resource_uuid'), table_name='resource')
    op.drop_table('resource')
    op.drop_index(op.f('ix_query_uuid'), table_name='query')
    op.drop_table('query')
    sa.Enum('day', 'week', name='scheduleunit').drop(op.get_bind())
    sa.Enum('ready', 'running', 'stopped', 'failed', name='scraperstatus').drop(op.get_bind())
    # ### end Alembic commands ###