services:
  postgres:
    image: postgres:latest
    restart: always
    env_file:
      - backend/.env
    expose:
      - 5432
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - backend/.env
    ports:
      - "8002:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - net

  frontend:
    build:
      context: ./frontend
    image: frontend:latest
    volumes:
      - ./frontend:/src/app
      - /src/app/node_modules
    ports:
      - "3000:3000"
    stdin_open: true
    tty: true

  testapp:
    build:
      context: ./testapp
      dockerfile: Dockerfile
      args:
        - TAG=${TAG:-latest}
    image: testapp:${TAG:-latest}
    profiles: [test]
    stdin_open: true
    tty: true
    env_file:
      - conan/.env
    volumes:
      - ./testapp:/app

  backend:
    build:
      context: ./backend
    image: backend:latest
    shm_size: '2g'
    env_file:
      - backend/.env
    command: bash /app/bin/start.sh
    ports:
      - "8000:8000"
      - "8265:8265"
    volumes:
      - ./backend:/app
      - ./data/models:/root/.cache/chroma/onnx_models
    networks:
      - net
    environment:
      - ENV=dev # dev, prod
    stdin_open: true
    tty: true
    depends_on:
      postgres:
        condition: service_healthy
      chroma:
        condition: service_healthy

  chroma:
    image: ghcr.io/chroma-core/chroma:latest
    volumes:
      - ./data/chroma:/chroma/chroma
      - ./data/models:/root/.cache/chroma/onnx_models
    ports:
      - "8080:8080"
    command: "--workers 1 --host 0.0.0.0 --port 8080 --proxy-headers --log-config chromadb/log_config.yml --timeout-keep-alive 30"
    networks:
      - net
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/api/v1/heartbeat" ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  pg_data:
  ml_models:
  chroma:
    driver: local
  models:
    driver: local

networks:
  net:
    driver: bridge
